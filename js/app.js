'use strict';(()=>{let cfg={data(){return{current_time:new Date().getTime(),config:{contract:{abi:window.abi_contract,address:"0xf93D9eF7E9e0cF7AB9E4A516AffAd88DA7153795"},token:{abi:window.abi_token,address:"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56"}},launch_date:1636012800000,time_left:{hours:0,minutes:0,seconds:0},loaded:0};},created(){let self=this;setInterval(()=>{let c=self.countdown(self.launch_date);self.time_left={hours:c.hours,minutes:c.minutes,seconds:c.seconds},self.current_time=new Date().getTime();},1000);},methods:{countdown(end,combine=0,ms=0){if(end<100)return"No record";if(end<16e10)end*=1e3;var now=new Date().getTime();var timeleft=end-now;timeleft=timeleft<0?now-end:timeleft;if(ms!=0)return timeleft;var days=Math.floor(timeleft/(1000*60*60*24));var hours=Math.floor((timeleft%(1000*60*60*24))/(1000*60*60));var minutes=Math.floor((timeleft%(1000*60*60))/(1000*60));var seconds=Math.floor((timeleft%(1000*60))/1000);hours=(days*24)+hours;if(hours<10)hours="0"+hours;if(minutes<10)minutes="0"+minutes;if(seconds<10)seconds="0"+seconds;if(timeleft<=0)return 0;if(isNaN(hours))return"No record";return combine==1?hours+":"+minutes+":"+seconds:{hours:hours,minutes:minutes,seconds:seconds};},prettyDate(e){if(e<100)return"No record";if(e<16e10)e*=1e3;return window.countdown(e);}}};window.App=new Vue({mixins:[cfg],el:'#cmf',data:{user:{ref:"0x290C54C5195075E69F2d4a27AA5F6080e6CfD0Cb",address:"",workers:0,claimable:0,checkpoint:0,next_claim:"",balance:0,allowance:0,cmfvalue:0,new_cmf:0,rate:0,},chain:{price:0,balance:0,cmf_price:0,},val:{approve:10,spend:10,hireAmount:0,rehireAmount:0,},notifications:[],conn:"",contract:"",token:"",instructions:false,max_divisor:0.14,time_step:1296000},mounted(){let self=this;let m=location.search.match(/ref=(0x[a-fA-F0-9]{40})/i);if(m){self.user.ref=self.toAddress(m[1]);document.cookie="ref="+self.user.ref+"; path=/; expires="+(new Date(new Date().getTime()+86400*365*1000)).toUTCString();};m=document.cookie.match(/ref=(0x[a-fA-F0-9]{40})/i);if(m)self.user.ref=self.toAddress(m[1]);setInterval(self.updateData,20000);self.connectWallet();self.loaded=1;window.addEventListener("load",async function(){try{window._web3=new Web3(new Web3.providers.HttpProvider("https:\/\/bsc-dataseed1.binance.org"));initWeb3();}catch(e){}});async function initWeb3(){try{if(_web3){let _contract=await new _web3.eth.Contract(self.config.contract.abi,self.config.contract.address);self.chain.price=10/(parseInt(await _contract.methods.calculateEggBuySimple(self.toWei("10")).call())/self.time_step);self.chain.cmf_price=self.parseWei(await _contract.methods.calculateEggSell("1000000").call());self.chain.balance=self.parseWei(await _contract.methods.getBalance().call());}}catch(e){};setTimeout(initWeb3,5000);};setInterval(()=>{if(self.user.checkpoint!=0);self.user.next_claim=self.countdown(self.user.checkpoint,1);if(self.user.rate!=0){self.user.cmfvalue=parseFloat(self.user.cmfvalue)+parseFloat(self.user.rate)/86400;self.user.claimable=parseFloat(self.user.claimable)+parseFloat(self.user.workers);}},1000);document.body.className="loaded";},watch:{},methods:{connectWallet(){var self=this;(async()=>{try{let providerOptions={walletconnect:{package:WalletConnectProvider.default,options:{bridge:"https:\/\/bridge.walletconnect.org",rpc:{56:"https:\/\/bsc-dataseed1.binance.org",97:"https:\/\/data-seed-prebsc-1-s1.binance.org:8545"},chainId:56,network:"binance",qrcode:true,cache:true}}};let web3conn=new window.Web3Modal.default({network:"binance",cacheProvider:true,providerOptions});let provider;try{provider=await web3conn.connect();provider.on("accountsChanged",(accounts)=>{console.log(accounts);self.notify("Account Changed!","App will refresh in 3 seconds");setTimeout(()=>{location.reload(true);},3e3);});provider.on("chainChanged",(chainId)=>{console.log(chainId);self.notify("Chain Changed!","App will refresh in 3 seconds");setTimeout(()=>{location.reload(true);},3e3);});provider.on("connect",(info)=>{console.log("Web3: Connected to chain id: "+info.chainId);console.log(info);});provider.on("disconnect",(error)=>{console.log("Web3: Disconnected!");console.log(error);});}catch(e){self.notify("Cannot connect to wallet!");console.log("Cannot connect to wallet");console.log(e);return;};self.conn=new Web3(provider);self.contract=await new self.conn.eth.Contract(self.config.contract.abi,self.config.contract.address);self.token=await new self.conn.eth.Contract(self.config.token.abi,self.config.token.address);let accounts=await self.conn.eth.getAccounts();self.user.address=self.toAddress(accounts[0]);self.contract.defaultAccount=self.toAddress(accounts[0]);self.updateData();}catch(e){console.log(e);}})();},updateData(){var self=this;if(self.conn!=""&&self.user.address!=""){(async()=>{self.user.balance=self.parseWei(await self.token.methods.balanceOf(self.user.address).call());self.chain.price=self.val.spend/(parseInt(await self.contract.methods.calculateEggBuySimple(self.toWei(self.val.spend.toString())).call())/self.time_step);self.chain.cmf_price=self.parseWei(await self.contract.methods.calculateEggSell("1000000").call());self.user.allowance=self.parseWei(await self.token.methods.allowance(self.user.address,self.config.contract.address).call());self.user.workers=await self.contract.methods.getMyMiners().call();self.user.claimable=await self.contract.methods.getMyEggs().call();self.user.cmfvalue=self.parseWei(await self.contract.methods.calculateEggSell(self.user.claimable).call());self.chain.balance=self.parseWei(await self.contract.methods.getBalance().call());if(parseFloat(self.val.spend)>0){self.val.hireAmount=parseInt(await self.contract.methods.calculateEggBuySimple(self.toWei(""+parseFloat(self.val.spend))).call())/self.time_step;};self.user.rate=self.parseWei(await self.contract.methods.calculateEggSell((self.user.workers*86400)+"").call());self.user.checkpoint=86400000+parseFloat(await self.contract.methods.getLastHatch(self.user.address).call());self.val.rehireAmount=parseInt(await self.contract.methods.calculateEggBuySimple(self.toWei(""+parseFloat(self.user.cmfvalue))).call())/self.time_step})();}},updateHireAmount(){var self=this;var amount=parseFloat(self.val.spend);if(amount<=0)return;(async()=>{self.val.hireAmount=parseInt(await self.contract.methods.calculateEggBuySimple(self.toWei(""+amount)).call())/1296000;})();},goHome(){top.location.href="https:\/\/cryptomoon.farm";},notify(title,content='',timeout=8e3){let self=this;if(content==''){content=title;title='';};self.notifications.push({expiresOn:self.current_time+timeout,title:title,content:content});for(let i=0;i<self.notifications.length;i++){if(self.notifications[i].expiresOn<=self.current_time){self.notifications.splice(i,1);i--;}}},closeNotif(index){let self=this;self.notifications.splice(index,1);},toggleInstructions(){this.instructions=!this.instructions;console.log(this.instructions);},copyRef(){let self=this;let s=document.createElement('input');let _lnk="https:\/\/busd.cryptomoon.farm?ref="+self.user.address;s.value=_lnk;document.body.appendChild(s);if(navigator.userAgent.match(/ipad|ipod|iphone/i)){s.contentEditable=true;s.readOnly=false;let range=document.createRange();range.selectNodeContents(s);let sel=window.getSelection();sel.removeAllRanges();sel.addRange(range);s.setSelectionRange(0,999999);}else{s.select();};try{document.execCommand('copy');this.notify("Copied to clipboard",_lnk);}catch(e){};s.remove();},cleanText(str){return str.substr(0,7)+'...'+str.substr(str.length-4,str.length);},parseWei(wei){return Web3.utils.fromWei(wei);},toWei(a){return Web3.utils.toWei(a);},toAddress(a){return Web3.utils.toChecksumAddress(a);},format(val,dec=0,comma=false){val=parseFloat(val);if(isNaN(val)||val==Infinity)return"...";if(dec==0)dec=((val+"").split(".").length>1?(((val+"").split(".")[1].length>8)?(val>1)?4:8:((val+"").split(".")[1].length>4)?4:2):(2));let a=(Math.round(val*10**dec)/10**dec).toFixed(dec);return comma==false?a:a>=1000?Number(a).toLocaleString():a;},prettifyAmount(n){var ranges=[{divider:1e18,suffix:'E'},{divider:1e15,suffix:'P'},{divider:1e12,suffix:'T'},{divider:1e9,suffix:'B'},{divider:1e6,suffix:'M'},{divider:1e3,suffix:'K'}];for(var i=0;i<ranges.length;i++){if(n>=ranges[i].divider){n=Math.floor(n/(ranges[i].divider/100))/100;return n.toString()+ranges[i].suffix;}};return n.toString();},approve(){var self=this;if(parseFloat(self.val.approve)<=0)return;if(self.conn!=""&&self.user.address!=""){self.notify("Approve BUSD","Please confirm transaction.");self.token.methods.approve(self.config.contract.address,self.toWei(self.val.approve+"")).send({from:self.user.address});self.updateData();}else{console.log("Please connect to wallet!");}},buy(){var self=this;let amount=parseFloat(self.val.spend);if(amount<1||amount>parseFloat(self.user.allowance)||amount>self.chain.balance/self.max_divisor)return;if(self.conn!=""&&self.user.address!=""){self.notify("Hire farmers","Hiring "+parseInt(amount/self.chain.price)+" farmers for "+amount+" BUSD");self.contract.methods.buyEggs(self.user.ref,self.toWei(amount+"")).send({from:self.user.address}).then(res=>{self.notify("Transaction Successful","Successfully hired farmers!",60e3);self.updateData();}).catch(e=>{console.log(e);});}else{console.log("Please connect to wallet!");}},compound(){var self=this;let amount=Math.floor(self.user.claimable/self.chain.price);if(amount<=0)return self.notify("Cannot hire less than 1 farmer!");if(self.conn!=""&&self.user.address!=""){self.notify("Hire more farmers","Please confirm transaction.");self.contract.methods.hatchEggs(self.user.ref).send({from:self.user.address}).then(res=>{self.notify("Transaction Successful","Successfully hired more farmers!",60e3);self.updateData();}).catch(e=>{console.log(e);});}else{console.log("Please connect to wallet!");}},collect(){var self=this;let amount=parseFloat(self.user.claimable);if(amount<=0)return self.notify("Nothing to claim!");if(self.conn!=""&&self.user.address!=""){self.notify("Claim BUSD","Please confirm transaction.");self.contract.methods.sellEggs().send({from:self.user.address}).then(res=>{self.notify("Claim","Claim successful!",60e3);self.updateData();}).catch(e=>{console.log(e);});}else{console.log("Please connect to wallet!");}}}});})();function __seed(){App.contract.methods.seedMarket().send({from:App.user.address});}